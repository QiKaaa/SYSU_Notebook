# include <iostream>
# include <algorithm>
//# include <io.h>
#include <iomanip>
#ifdef _WIN32
#include <fcntl.h>
#endif
#define For(i,x,y) for(int i=(x);i<=(y);++i)
#define Rof(i,x,y) for(int i=(x);i>=(y);--i)
using namespace std;
const int N = 1e6 + 5;
const unsigned char S_BOX[16][16] = {
		0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
		0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
		0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
		0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
		0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
		0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
		0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
		0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
		0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
		0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
		0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
		0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
		0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
		0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
		0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
		0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};
const unsigned char INV_S_BOX[16][16] = {
		0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
		0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
		0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
		0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
		0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
		0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
		0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
		0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
		0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
		0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
		0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
		0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
		0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
		0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
		0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
		0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};
const unsigned char RC[10] = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36 };
const unsigned char M_C[4][4] = {
	0x02, 0x03, 0x01, 0x01,
	0x01, 0x02, 0x03, 0x01,
	0x01, 0x01, 0x02, 0x03,
	0x03, 0x01, 0x01, 0x02
};
const unsigned char INV_M_C[4][4] = {
	0x0e, 0x0b, 0x0d, 0x09,
	0x09, 0x0e, 0x0b, 0x0d,
	0x0d, 0x09, 0x0e, 0x0b,
	0x0b, 0x0d, 0x09, 0x0e
};
unsigned char type;
unsigned char key[16];
unsigned char IV[16];
unsigned int len;
unsigned char s[16], t[16];
unsigned int state[4];
unsigned int RoundKey[11][4];

void read8(unsigned char& a) {
	a = getchar();
}
void read32(unsigned int& a) {
	a = 0;
	unsigned int tmp = 1;
	unsigned char c;
	For(i, 0, 3) {
		c = getchar();
		a = c * tmp + a;
		tmp = tmp * 256;
	}
}

unsigned char GetByte(unsigned int x, int pos) {
	return (unsigned char)(x >> (pos << 3)) & 255;
}
void XorByte(unsigned int& x, unsigned char y, int pos) {
	x ^= (y << (pos << 3));
}
void SetByte(unsigned int& x, unsigned char  y, int pos) {
	XorByte(x, GetByte(x, pos), pos);
	XorByte(x, y, pos);
}

void S_SubBytes(unsigned int &x,int j) {
	unsigned char tmp = GetByte(x, j);
	SetByte(x, S_BOX[tmp>>4][tmp&15], j);
}
void S_Trans(unsigned int& x) {
	For(i, 0, 3) {
		S_SubBytes(x, i);
	}
}
void inv_S_SubBytes(unsigned int& x, int j) {
	unsigned char tmp = GetByte(x, j);
	SetByte(x, INV_S_BOX[tmp >> 4][tmp & 15], j);
}
void inv_S_Trans(unsigned int& x) {
	For(i, 0, 3) {
		inv_S_SubBytes(x, i);
	}
}

void leftLoop(unsigned int& x) {
	unsigned int y = x;
	x = 0;
	For(i, 0, 3) {
		SetByte(x, GetByte(y, (i + 1) & 3), i);
	}
}
unsigned int T(unsigned int x, int num) {
//	Debug_INT(x);
	leftLoop(x);
//	Debug_INT(x);
	S_Trans(x);
//	Debug_INT(x);
	XorByte(x, RC[num], 0);
	return x;
}
void KeyExplansion(int cnt) {
	For(i, 0, 15) {
		SetByte(RoundKey[0][i >> 2], key[i], i & 3);
	}
	For(i, 1, cnt) {
//		cerr<<"Round "<<i<<endl;
//		Debug_KEY(i-1);
		unsigned int tmp = T(RoundKey[i-1][3], i-1);
//		Debug_INT(tmp);
		RoundKey[i][0] = RoundKey[i - 1][0] ^ tmp;
		For(j, 1, 3) {
			RoundKey[i][j] = RoundKey[i - 1][j] ^ RoundKey[i][j - 1];
		}
//		Debug_KEY(i);
	}
}

void SetState(int num) {
	For(i, 0, 3) state[i] = 0;
	For(i, 0, 15) {
		SetByte(state[i >> 2], s[i], i & 3);
	}
}
void SetCBC() {
	For(i, 0, 15) {
		XorByte(state[i >> 2], IV[i], i & 3);
	}
}

void AddRoundKey(int round) {
	For(i, 0, 3) {
		state[i] ^= RoundKey[round][i];
	}
}

void ShiftRows() {
	unsigned int tmp[4];
	For(i, 0, 3) {
		tmp[i] = state[i];
	}
	For(i, 0, 3) {
		For(j, 0, 3) {
			SetByte(state[i], GetByte(tmp[(i + j) % 4], j), j);
		}
	}
}
void inv_ShiftRows() {
	unsigned int tmp[4];
	For(i, 0, 3) {
		tmp[i] = state[i];
	}
	For(i, 0, 3) {
		For(j, 0, 3) {
			SetByte(state[i], GetByte(tmp[(i - j + 4) % 4], j), j);
		}
	}
}
unsigned char calc1(unsigned char x){
	return x;
}
unsigned char calc2(unsigned char x){
	return ((x>>7)&1)? (unsigned char)(x<<1) ^ (unsigned char)0x1b :(unsigned char)x<<1;
}
unsigned char calc3(unsigned char x){
	return calc1(x)^calc2(x);
}
unsigned char calc4(unsigned char x){
	return calc2(calc2(x));
}
unsigned char calc8(unsigned char x){
	return calc2(calc4(x));
}
unsigned char calc9(unsigned char x){
	return calc8(x)^calc1(x);
}
unsigned char calcB(unsigned char x){
	return calc9(x)^calc2(x);
}
unsigned char calcC(unsigned char x){
	return calc8(x)^calc4(x);
}
unsigned char calcD(unsigned char x){
	return calcC(x)^calc1(x);
}
unsigned char calcE(unsigned char x){
	return calcC(x)^calc2(x);
}
unsigned char calc(unsigned char x, unsigned char y) {
	if(y == 1) return calc1(x);
	if(y == 2) return calc2(x);
	if(y == 3) return calc3(x);
	if(y == 9) return calc9(x);
	if(y == 11) return calcB(x);
	if(y == 13) return calcD(x);
	if(y == 14) return calcE(x);
}
void MixColumns() {
	unsigned char A[4][4];
	For(i, 0, 3) {
		For(j, 0, 3) {
			A[i][j] = GetByte(state[i], j);
		}
		state[i] = 0;
	}

	For(i, 0, 3) {
		For(j, 0, 3) {
			XorByte(state[j], calc(A[j][0], M_C[i][0]) ^ calc(A[j][1], M_C[i][1])
			 ^calc(A[j][2], M_C[i][2]) ^ calc(A[j][3], M_C[i][3]), i) ;
		}
	}
}
void inv_MixColumns() {
	unsigned int A[4][4];
	For(i, 0, 3) {
		For(j, 0, 3) {
			A[i][j] = GetByte(state[i], j);
		}
		state[i] = 0;
	}
	
	For(i, 0, 3) {
		For(j, 0, 3) {
			XorByte(state[j], calc(A[j][0], INV_M_C[i][0]) ^ calc(A[j][1], INV_M_C[i][1])
			 ^calc(A[j][2], INV_M_C[i][2]) ^ calc(A[j][3], INV_M_C[i][3]), i);
		}
	}
}
bool check(int cnt, int x){
	Rof(i, cnt-1, cnt-x){
		if(t[i] != (unsigned char)x) return 0;
	}
	return 1;
}
int main() {
#ifdef _WIN32
	setmode(fileno(stdin), O_BINARY);
	setmode(fileno(stdout), O_BINARY);
#endif
#ifndef ONLINE_JUDGE
	freopen("in_3_1_2.bin","r",stdin);
	freopen("out_3_1.bin","w",stdout);
#endif
	read8(type);
	For(i, 0, 15) read8(key[i]);
	For(i, 0, 15) read8(IV[i]);
	read32(len);
//	For(i, 0, len - 1) read8(s[i]);
	
	KeyExplansion(10);
	if (type == 1) {
		unsigned int x = 16 - len % 16;		
		unsigned int new_len = len + x;
		int group = new_len / 16;
		For(i, 0, group - 1) {
			
			For(j, 0, 15){
				if((unsigned int)(i<<4) + j < len){
					read8(s[j]);
				}
				else{
					s[j] = x;
				}
			}
			
			SetState(i);
			SetCBC();
			AddRoundKey(0);
			For(j, 1, 10) {
				For(k, 0, 3) {
					S_Trans(state[k]);
				}
				ShiftRows();
				if(j < 10){
					MixColumns();
				}
				AddRoundKey(j);
			}
			For(j, 0, 15) {
				IV[j] = GetByte(state[j >> 2], j & 3);
				putchar(IV[j]);
			}
		}
	}
	else {
		int cnt = 0, group = len / 16;		
		For(i, 0, group - 1) {
			
			For(j, 0 , 15){
				read8(s[j]);
			}
			
			SetState(i);
			Rof(j, 10, 1) {
				AddRoundKey(j);
				if (j < 10){
					inv_MixColumns();
				}
				
				inv_ShiftRows();
				For(k, 0, 3) {
					inv_S_Trans(state[k]);
				}
			}
			AddRoundKey(0);
			SetCBC();
			For(j, 0, 15) {
				IV[j] = s[j];
			}
			if(i < group - 1){
				For(j, 0, 15){
					putchar(GetByte(state[j >> 2], j & 3));
				}				
			}
			else{
				For(j, 0, 15){
					t[j] = GetByte(state[j >> 2], j & 3);
				}
				For(j, 1, 16){
					if(check(cnt, j)){
						cnt = 16 - j;
						break;
					}
				}
				For(j, 0, cnt - 1) putchar(t[j]);
			}
		}
	}
}